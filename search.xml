<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习系列1——Pytorch 图像分类(LeNet)</title>
      <link href="/2022/11/21/shen-du-xue-xi-xi-lie-1-pytorch-tu-xiang-fen-lei-lenet/"/>
      <url>/2022/11/21/shen-du-xue-xi-xi-lie-1-pytorch-tu-xiang-fen-lei-lenet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要是参照 B 站 UP 主 <a href="https://space.bilibili.com/18161609" target="_blank" rel="noopener">霹雳吧啦Wz</a> 的视频学习笔记，参考的相关资料在文末<strong>参照</strong>栏给出，包括实现代码和文中用的一些图片。</p><p><strong>整个工程已经上传个人的 github <a href="https://github.com/lovewinds13/QYQXDeepLearning" target="_blank" rel="noopener">https://github.com/lovewinds13/QYQXDeepLearning</a> ，下载即可直接测试，数据集文件因为比较大，已经删除了，按照下文教程下载即可。</strong></p><hr><h1 id="2-LeNet"><a href="#2-LeNet" class="headerlink" title="2. LeNet"></a>2. LeNet</h1><p>LeNet 可以说是第一个卷积神经网络，LeNet-5。LeNet-5 由Y. LeCun 在 1998 年发表的文章《Gradient-Based Learning Applied to Document Recognition 》中正式提出，应用于数字识别问题。LeNet 包含了卷积网络的基本组件，如下图：可以看到卷积层，池化层，全连接层。</p><h2 id="2-1-网络结构"><a href="#2-1-网络结构" class="headerlink" title="2.1 网络结构"></a>2.1 网络结构</h2><p><img src="https://img-blog.csdnimg.cn/d1041f50467f478d98c99b8789cc1315.png#pic_center" alt="在这里插入图片描述"><br>LeNet-5 由 2 个卷积层，2 个池化层（下采样层），3 个全连接层组成。</p><table><thead><tr><th align="center">层</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">输入层（INPUT）</td><td align="center">32 X 32 X 1 的图片（长、宽、色彩）</td></tr><tr><td align="center">卷积层（C1）</td><td align="center">输入 32 X 32 X 1，卷积核 5 X 5 X 6，步长（stride）为 1， 输出  28 X 28 X 6 的特征图</td></tr><tr><td align="center">池化层（S2）</td><td align="center">输入 28 X 28 X 6， 过滤器为 2 X 2，输出 14 X 14 X 6</td></tr><tr><td align="center">卷积层（C3）</td><td align="center">输入 14 X 14 X 6，卷积核 5 X 5 X 16，步长（stride）为 1， 输出 10 X 10 X 16 的特征图</td></tr><tr><td align="center">池化层（S4）</td><td align="center">输入 10 X 10 X 16， 过滤器为 2 X 2，输出 5 X 5  X 16</td></tr><tr><td align="center">全连接层（C5）</td><td align="center">输入 5  X 5 X 16，卷积核 5 X 5 X 120，步长（stride）为 1，输出 1 X 1 X 120 的特征图</td></tr><tr><td align="center">全连接层（F6）</td><td align="center">输入 120 个节点，输出 84 个节点</td></tr><tr><td align="center">全连接层（OUTPUT）</td><td align="center">输入 84 个节点，输出 10 个节点</td></tr></tbody></table><p><strong>模型框图：</strong><br><img src="https://img-blog.csdnimg.cn/5a12fdd4933b4b5982a6bb929ecb847f.png#pic_center" alt="在这里插入图片描述"></p><h1 id="3-demo-实现"><a href="#3-demo-实现" class="headerlink" title="3. demo 实现"></a>3. demo 实现</h1><p>针对 CIFAR10 数据集，进行图像识别。</p><p>整个过程实现流程：</p><p><img src="https://img-blog.csdnimg.cn/0af25342614b4a6cb46dc556c82ecf90.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-1-demo-结构："><a href="#3-1-demo-结构：" class="headerlink" title="3.1 demo 结构："></a>3.1 demo 结构：</h2><p>demo 包含 model.py ，train.py，predict.py 三个文件。<br><img src="https://img-blog.csdnimg.cn/9fe6a97330c147479a6633f67d54d4bb.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-2-model-py"><a href="#3-2-model-py" class="headerlink" title="3.2 model.py"></a>3.2 model.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""模型"""</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 集成nn.Module父类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 看一下具体的参数</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                               out_channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                               stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                               padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                               bias<span class="token operator">=</span><span class="token boolean">True</span>                               <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.relu = nn.ReLU(inplace=True)</span>    <span class="token comment" spellcheck="true"># 正向传播</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输入: (3, 32, 32), 输出: (16, 28, 28)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出: (16, 14, 14)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出: (32, 10, 10)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出: (32, 5, 5)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出: (32*5*5)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出: (120)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出: (84)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出(10)</span>        <span class="token keyword">return</span> x<span class="token triple-quoted-string string">"""调试信息, 查看模型参数传递"""</span><span class="token comment" spellcheck="true"># import torch</span><span class="token comment" spellcheck="true"># input1 = torch.rand([32, 3, 32, 32])</span><span class="token comment" spellcheck="true"># modelx = LeNet()</span><span class="token comment" spellcheck="true"># print(modelx)</span><span class="token comment" spellcheck="true"># output = modelx(input1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-1-卷积后的图像尺寸"><a href="#3-2-1-卷积后的图像尺寸" class="headerlink" title="3.2.1 卷积后的图像尺寸"></a>3.2.1 卷积后的图像尺寸</h3><p>（1）正方形图像：输入大小 W X W，卷积核大小 F X F，步长 S，Padding 为 P，卷积之后输出大小为 N XN ，N 的计算如下：<br><img src="https://img-blog.csdnimg.cn/c5e58dbddbaa48c0ab06b80aef25a181.png#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python"> x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输入: (3, 32, 32), 输出: (16, 28, 28)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）矩形图像：输入大小 H X W，卷积核大小 F X F，步长 S，Padding 为 P，卷积之后输出大小计算如下：<br><img src="https://img-blog.csdnimg.cn/676adffad8f346cb8bf3510875fe02fa.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2-2-池化后的图像尺寸"><a href="#3-2-2-池化后的图像尺寸" class="headerlink" title="3.2.2 池化后的图像尺寸"></a>3.2.2 池化后的图像尺寸</h3><p>输入大小 H X W，卷积核尺寸 F X F，步长 S，池化之后输出大小计算如下：</p><p><img src="https://img-blog.csdnimg.cn/b7fca7f06ffe4b5b82766e476231c417.png#pic_center" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输入: (16, 28, 28), 输出: (16, 14, 14)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-3-Tensor-展平"><a href="#3-2-3-Tensor-展平" class="headerlink" title="3.2.3 Tensor 展平"></a>3.2.3 Tensor 展平</h3><p>经过前面一层处理，数据输出为三维 Tensor  (32, 5, 5)，使用 view() 方法来展平数据。</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出: (32*5*5)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-3-train-py"><a href="#3-3-train-py" class="headerlink" title="3.3 train.py"></a>3.3 train.py</h2><h3 id="3-3-1-导入包"><a href="#3-3-1-导入包" class="headerlink" title="3.3.1 导入包"></a>3.3.1 导入包</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> model <span class="token keyword">import</span> LeNet<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-数据集预处理"><a href="#3-3-2-数据集预处理" class="headerlink" title="3.3.2 数据集预处理"></a>3.3.2 数据集预处理</h3><pre class="line-numbers language-python"><code class="language-python">    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 数据转为张量</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 标准化处理</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将数据转成张量，并做标准化处理。</p><h3 id="3-3-3-导入数据集"><a href="#3-3-3-导入数据集" class="headerlink" title="3.3.3 导入数据集"></a>3.3.3 导入数据集</h3><p>数据集包括训练集和测试集，设置 download=True，自动从 Pytorch 网站下载数据集。下图为开始下载数据集。</p><p><img src="https://img-blog.csdnimg.cn/aca9e053c8d3450fb31ca13c55aeef73.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-3-4-数据集测试"><a href="#3-3-4-数据集测试" class="headerlink" title="3.3.4 数据集测试"></a>3.3.4 数据集测试</h3><p>可通过下面的代码，查看数据集图片。</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true"># 定义的分类标签</span>    class_labels <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'deer'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'ship'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 查看数据集的图片</span>    <span class="token keyword">def</span> <span class="token function">img_show</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> img <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.5</span>        np_img <span class="token operator">=</span> img<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查看数据集中的5张图像</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">" %5s "</span> <span class="token operator">%</span> class_labels<span class="token punctuation">[</span>val_label<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    img_show<span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>val_image<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 Pytorch Tensor 读入数据时，维度参数顺序发生了变化。<br>Pytorch Tensor 对应 [深度，高度，宽度]，而原始数据是[高度，宽度,深度]。故通过下面的代码调整，才能正常显示图片。</p><pre class="line-numbers language-python"><code class="language-python"> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>导入数据集：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入训练集数据(50000张图片)</span>    train_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># root: 数据集存储路径</span>                                             train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 数据集为训练集</span>                                             download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># download: True时下载数据集(下载完成修改为False)</span>                                             transform<span class="token operator">=</span>transform    <span class="token comment" spellcheck="true"># 数据预处理</span>                                             <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#   加载训练集</span>    train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 加载训练集</span>                                               batch_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># batch 大小</span>                                               shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 是否随机打乱训练集</span>                                               num_workers<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment" spellcheck="true"># 使用的线程数量</span>                                               <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 导入测试集(10000张图片)</span>    val_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span>                                           train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 数据集为测试集</span>                                           download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                           transform<span class="token operator">=</span>transform                                           <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加载测试集数据</span>    val_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>val_set<span class="token punctuation">,</span>                                             batch_size<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 测试集batch大小</span>                                             shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                             num_workers<span class="token operator">=</span><span class="token number">0</span>                                             <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取测试集中的图片和标签</span>    val_data_iter <span class="token operator">=</span> iter<span class="token punctuation">(</span>val_loader<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># val_image, val_label = val_data_iter.next()</span>    val_image<span class="token punctuation">,</span> val_label <span class="token operator">=</span> next<span class="token punctuation">(</span>val_data_iter<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#python 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-训练过程"><a href="#3-3-4-训练过程" class="headerlink" title="3.3.4 训练过程"></a>3.3.4 训练过程</h3><p>（1）<strong>CPU 训练代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"> net <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 用于训练的网络模型</span>    <span class="token comment" spellcheck="true"># 指定GPU or CPU 进行训练</span>    net<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">)</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 损失函数(交叉熵函数)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 优化器(训练参数, 学习率)</span>    <span class="token comment" spellcheck="true"># 训练的轮数</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token comment" spellcheck="true"># 遍历训练集, 从0开始</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data   <span class="token comment" spellcheck="true"># 得到训练集图片和标签</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 清除历史梯度</span>            outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正向传播</span>            loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 损失计算</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 反向传播</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#优化器更新参数</span>            <span class="token comment" spellcheck="true"># 用于打印精确率等评估参数</span>            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">499</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 500步打印一次</span>                <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>val_image<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入测试集数据</span>                    predict_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    accuracy <span class="token operator">=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>predict_y<span class="token punctuation">,</span> val_label<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> val_label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 打印训练轮数、精确率等</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%d, %5d] train_loss: %.3f   test_accuracy: %.3f"</span> <span class="token operator">%</span>                          <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span>                          <span class="token punctuation">)</span>                    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cost time = "</span><span class="token punctuation">,</span> end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished trainning"</span><span class="token punctuation">)</span>    save_path <span class="token operator">=</span> <span class="token string">"./LeNet.pth"</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 保存训练输出的模型文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练打印信息：<br><img src="https://img-blog.csdnimg.cn/7cc78c962c6540768dc63e3d5113b0c0.png#pic_center" alt="在这里插入图片描述">（2）<strong>GPU 训练代码：</strong><br>需要将训练设备指定为 GPU，且需要修改对应数据和标签。</p><pre class="line-numbers language-python"><code class="language-python">net <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 用于训练的网络模型</span>    <span class="token comment" spellcheck="true"># 指定GPU or CPU 进行训练</span>    net<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 损失函数(交叉熵函数)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 优化器(训练参数, 学习率)</span>    <span class="token comment" spellcheck="true"># 训练的轮数</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token comment" spellcheck="true"># 遍历训练集, 从0开始</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs<span class="token punctuation">,</span> labels <span class="token operator">=</span> data   <span class="token comment" spellcheck="true"># 得到训练集图片和标签</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 清除历史梯度</span>            outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正向传播</span>            loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 损失计算</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 反向传播</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#优化器更新参数</span>            <span class="token comment" spellcheck="true"># 用于打印精确率等评估参数</span>            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> step <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">499</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 500步打印一次</span>                <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>val_image<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 传入测试集数据</span>                    predict_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    accuracy <span class="token operator">=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>predict_y<span class="token punctuation">,</span> val_label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> val_label<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 打印训练轮数、精确率等</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[%d, %5d] train_loss: %.3f   test_accuracy: %.3f"</span> <span class="token operator">%</span>                          <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> <span class="token number">500</span><span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span>                          <span class="token punctuation">)</span>                    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finished trainning"</span><span class="token punctuation">)</span>    save_path <span class="token operator">=</span> <span class="token string">"./LeNet.pth"</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 保存训练输出的模型文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对比可发现，GPU 的速度快于 CPU。</p><p><strong>注：</strong><br>本文采用 pycharm 开发，需要安装对应 CUDA，具体的版本需要查看自己电脑对应的 GPU 型号，然后下载 CUDA 安装。本文的信息如下：</p><p><img src="https://img-blog.csdnimg.cn/0cd4efcd8e8c494dbaffd5f76a571aaa.png#pic_center" alt="在这里插入图片描述"></p><h2 id="3-4-predict-py"><a href="#3-4-predict-py" class="headerlink" title="3.4. predict.py"></a>3.4. predict.py</h2><p>此文件为模型测试代码。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">""""测试"""</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> model <span class="token keyword">import</span> LeNet<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    data_class <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'deer'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'ship'</span><span class="token punctuation">,</span> <span class="token string">'truck'</span><span class="token punctuation">)</span>    net <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'LeNet.pth'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># net.load_state_dict(torch.load('LeNet.pth', map_location=torch.device("cpu")))</span>    test_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'cat_test2.jpg'</span><span class="token punctuation">)</span>    test_image <span class="token operator">=</span> transform<span class="token punctuation">(</span>test_image<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [C H W]</span>    test_image <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>test_image<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [N C H W]</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>test_image<span class="token punctuation">)</span>        predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"It is {data_class[int(predict)]}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试图片为：cat_test2.jpg<br><img src="https://img-blog.csdnimg.cn/5f13ce6f40cf42abab00680af42486f4.jpeg#pic_center" alt="在这里插入图片描述"><br>测试结果：<br><img src="https://img-blog.csdnimg.cn/cdff445c0dbd462e81f723c05f3ec8b1.png#pic_center" alt="在这里插入图片描述"></p><hr><h1 id="欢迎关注公众号：【千艺千寻】，共同成长"><a href="#欢迎关注公众号：【千艺千寻】，共同成长" class="headerlink" title="欢迎关注公众号：【千艺千寻】，共同成长"></a><strong>欢迎关注公众号：【千艺千寻】，共同成长</strong></h1><p><img src="https://img-blog.csdnimg.cn/0e306185d55042c19ad6434ef8a1c2a9.png#pic_center" alt="在这里插入图片描述"></p><hr><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li><a href="https://blog.csdn.net/m0_37867091/article/details/107136477" target="_blank" rel="noopener">pytorch图像分类篇：2.pytorch官方demo实现一个分类器(LeNet)</a></li><li><a href="https://www.bilibili.com/video/BV187411T7Ye/?spm_id_from=333.999.0.0&vd_source=103efe685ad4c1216c5d837f7dd7d25c" target="_blank" rel="noopener">B站——2.1 pytorch官方demo(Lenet)</a></li><li><a href="https://blog.sciencenet.cn/home.php?mod=space&uid=3428464&do=blog&id=1255308" target="_blank" rel="noopener">Pytorch中nn.Conv1d、Conv2D与BatchNorm1d、BatchNorm2d函数 </a></li><li><a href="https://blog.csdn.net/STATEABC/article/details/123661612?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-123661612-blog-107136477.pc_relevant_aa&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-123661612-blog-107136477.pc_relevant_aa&utm_relevant_index=4" target="_blank" rel="noopener">pytorch官方demo实现图像分类(LeNet)</a></li><li><a href="https://github.com/WZMIAOMIAO/deep-learning-for-image-processing" target="_blank" rel="noopener">UP主代码——Test1_official_demo</a></li><li><a href="https://pytorch.apachecn.org/#/" target="_blank" rel="noopener">Pytorch中文</a></li><li><a href="https://blog.csdn.net/qq_37541097/article/details/102926037" target="_blank" rel="noopener">pytorch中的卷积操作详解</a></li><li><a href="https://axon.cs.byu.edu/~martinez/classes/678/Papers/Convolution_nets.pdf" target="_blank" rel="noopener">LeNet 论文地址</a></li><li><a href="https://www.ruanx.net/lenet/" target="_blank" rel="noopener">LeNet：第一个卷积神经网络</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习系列2——Pytorch 图像分类(AlexNet)</title>
      <link href="/2022/11/21/shen-du-xue-xi-xi-lie-2-pytorch-tu-xiang-fen-lei-alexnet/"/>
      <url>/2022/11/21/shen-du-xue-xi-xi-lie-2-pytorch-tu-xiang-fen-lei-alexnet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文主要是参照 B 站 UP 主 <a href="https://space.bilibili.com/18161609" target="_blank" rel="noopener">霹雳吧啦Wz</a> 的视频学习笔记，参考的相关资料在文末<strong>参照</strong>栏给出，包括实现代码和文中用的一些图片。</p><p><strong>整个工程已经上传个人的 github <a href="https://github.com/lovewinds13/QYQXDeepLearning" target="_blank" rel="noopener">https://github.com/lovewinds13/QYQXDeepLearning</a> ，下载即可直接测试，数据集文件因为比较大，已经删除了，按照下文教程下载即可。</strong></p><p>论文下载：<a href="https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf" target="_blank" rel="noopener">ImageNet Classification with Deep Convolutional Neural Networks</a></p><h1 id="2-AlexNet"><a href="#2-AlexNet" class="headerlink" title="2. AlexNet"></a>2. AlexNet</h1><p>AlexNet 是 2012 年 ISLVRC 2012（ImageNet Large Scale Visual Recognition Challenge） 竞赛的冠军网络， 分类准确率由传统的 70%+ 提升到 80%+。它是由 Hinton 和他的学生Alex Krizhevsky设计的。 </p><p>AlexNet 2012 年在大规模图像识别中一起绝尘，从此引领了深度神经网络的热潮。另外，AlexNet 提出的 ReLU 激活函数， LRN， GPU 加速，数据增强，Dropout 失活部分神经元等方式，深刻的影响了后续的神经网络。</p><h2 id="2-1-网络框架"><a href="#2-1-网络框架" class="headerlink" title="2.1 网络框架"></a>2.1 网络框架</h2><p><img src="https://img-blog.csdnimg.cn/65517181ecc44f59a61d75476534a62e.png#pic_center" alt="在这里插入图片描述"></p><p>AlexNet 共有 8 层组成，其中包括 5 个卷积层，3 个全连接层。各层参数如下：<br><img src="https://img-blog.csdnimg.cn/2889f07a00864f6c9e042b91adbd5d82.png#pic_center" alt="在这里插入图片描述"><br>计算公式参考<a href="https://blog.csdn.net/wwt18811707971/article/details/127820299?spm=1001.2014.3001.5501" target="_blank" rel="noopener">深度学习系列1——Pytorch 图像分类(LeNet)</a>，此处不再列出。</p><p>其传输框图如下：<br><img src="https://img-blog.csdnimg.cn/fa3cd74c126b47e69ea08cf42c095b3b.png#pic_center" alt="在这里插入图片描述"></p><p>卷积层1数据传输如下：</p><p><img src="https://img-blog.csdnimg.cn/db825339199c47338ffa6259f3d84c95.png#pic_center" alt="在这里插入图片描述"><br>其余层依此类似，只需类推。</p><h2 id="2-2-补充"><a href="#2-2-补充" class="headerlink" title="2.2 补充"></a>2.2 补充</h2><h3 id="2-2-1-过拟合"><a href="#2-2-1-过拟合" class="headerlink" title="2.2.1 过拟合"></a>2.2.1 过拟合</h3><p>根本原因是特征维度过多， <strong>模型假设过于复杂， 参数过多， 训练数据过少</strong>， 噪声过多，导致拟合的函数完美的预测训练集， 但对新数据的测试集预测结果差。 过度的拟合了训练数据， 而没有考虑到泛化能力。</p><p>过拟合主要受数据量和模型复杂度的影响。</p><p><img src="https://img-blog.csdnimg.cn/f207555d1d264e88a92f0008318dca93.png#pic_center" alt="在这里插入图片描述"></p><p>一句话就是：平时作业完成的非常好，但是考试就歇菜了。</p><h3 id="2-2-2-Dropout"><a href="#2-2-2-Dropout" class="headerlink" title="2.2.2 Dropout"></a>2.2.2 Dropout</h3><p>网络正向传播过程中随机失活一部分神经元，减少过拟合。Dropout 主要用在全连接层。</p><p><img src="https://img-blog.csdnimg.cn/fe739a334c3f4fb6bb5e73f3f6be2815.png#pic_center" alt="在这里插入图片描述"></p><h1 id="3-demo-实现"><a href="#3-demo-实现" class="headerlink" title="3. demo 实现"></a>3. demo 实现</h1><h2 id="3-1-数据集"><a href="#3-1-数据集" class="headerlink" title="3.1 数据集"></a>3.1 数据集</h2><p>本文使用花分类数据集，下载链接: <a href="http://download.tensorflow.org/example_images/flower_photos.tgz" target="_blank" rel="noopener">花分类数据集——http://download.tensorflow.org/example_images/flower_photos.tgz</a></p><p><img src="https://img-blog.csdnimg.cn/527b7a338ae7489f910675254675615c.png#pic_center" alt="在这里插入图片描述"></p><p>数据集划分参考这个<a href="https://blog.csdn.net/m0_37867091/article/details/107150142" target="_blank" rel="noopener">pytorch图像分类篇：3.搭建AlexNet并训练花分类数据集</a></p><h2 id="3-1-demo-结构："><a href="#3-1-demo-结构：" class="headerlink" title="3.1 demo 结构："></a>3.1 demo 结构：</h2><p><img src="https://img-blog.csdnimg.cn/cf4ef19a778f4035aa038af45bff70af.png#pic_center" alt="在这里插入图片描述"></p><p>在 CPU 训练的基础上，为了修改为 GPU 训练，因此单独修改了一个文件 train_gpu.py。</p><h2 id="3-2-model-py"><a href="#3-2-model-py" class="headerlink" title="3.2 model.py"></a>3.2 model.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""模型"""</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token keyword">class</span> <span class="token class-name">AlexNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> init_weights<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AlexNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">"""        特征提取        """</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 输入[3, 224, 224] 输出[48, 55, 55]</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出 [48,27,27]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 输出 [128, 27, 27]</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出 [128, 13, 13]</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出[192, 13, 13]</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 输出[192, 13, 13]</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 输出[128, 13, 13]</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出 [128, 6, 6]</span>        <span class="token punctuation">)</span>        <span class="token triple-quoted-string string">"""        分类器        """</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># Dropout 随机失活神经元, 比例诶0.5</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">if</span> init_weights<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_initialize_weights<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> start_dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token triple-quoted-string string">"""    权重初始化    """</span>    <span class="token keyword">def</span> <span class="token function">_initialize_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_out'</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""测试模型"""</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     input1 = torch.rand([224, 3, 224, 224])</span><span class="token comment" spellcheck="true">#     model_x = AlexNet()</span><span class="token comment" spellcheck="true">#     print(model_x)</span>    <span class="token comment" spellcheck="true"># output = AlexNet(input1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处的网络模型仅使用了一半的参数，即原 AlexNet 两块 GPU 中的一块。</p><h3 id="3-2-1-nn-Sequential-介绍"><a href="#3-2-1-nn-Sequential-介绍" class="headerlink" title="3.2.1 nn.Sequential 介绍"></a>3.2.1 nn.Sequential 介绍</h3><p>nn.Sequential 是 nn.Module 的容器，用于<strong>按顺序</strong>包装一组网络层，在模型复杂情况下，使用 nn.Sequential 方法对模块划分。除了 nn.Sequetial，还有 nn.ModuleList 和 nn.ModuleDict。</p><p><img src="https://img-blog.csdnimg.cn/656d92f257e241348bc649a9e5ae901d.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2-2-Tensor-展平"><a href="#3-2-2-Tensor-展平" class="headerlink" title="3.2.2  Tensor 展平"></a>3.2.2  Tensor 展平</h3><p>直接使用 torch.flatten 方法展平张量</p><pre class="line-numbers language-python"><code class="language-python"> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> start_dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 二维平坦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-3-model-py"><a href="#3-3-model-py" class="headerlink" title="3.3 model.py"></a>3.3 model.py</h2><h3 id="3-3-1-导入包"><a href="#3-3-1-导入包" class="headerlink" title="3.3.1  导入包"></a>3.3.1  导入包</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""训练(CPU)"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> json<span class="token keyword">import</span> time<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> utils<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm   <span class="token comment" spellcheck="true"># 显示进度条模块</span><span class="token keyword">from</span> model <span class="token keyword">import</span> AlexNet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-2-数据集预处理"><a href="#3-3-2-数据集预处理" class="headerlink" title="3.3.2 数据集预处理"></a>3.3.2 数据集预处理</h3><pre class="line-numbers language-python"><code class="language-python">    data_transform <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"train"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                    transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 随机裁剪, 再缩放为 224*224</span>                                    transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 水平随机翻转</span>                                    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"val"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 元组(224, 224)</span>                                    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3-加载数据集"><a href="#3-3-3-加载数据集" class="headerlink" title="3.3.3 加载数据集"></a>3.3.3 加载数据集</h3><h4 id="3-3-3-1-读取数据路径"><a href="#3-3-3-1-读取数据路径" class="headerlink" title="3.3.3.1 读取数据路径"></a>3.3.3.1 读取数据路径</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># data_root = os.path.abspath(os.path.join(os.getcwd(), "../..")) # 读取数据路径</span>data_root <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root<span class="token punctuation">,</span> <span class="token string">"data_set"</span><span class="token punctuation">,</span> <span class="token string">"flower_data"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># image_path = data_root + "/data_set/flower_data/"</span><span class="token keyword">assert</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"{} path does not exist."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处相比于 UP 主教程，修改了读取路径。</p><h4 id="3-3-3-2-加载训练集"><a href="#3-3-3-2-加载训练集" class="headerlink" title="3.3.3.2 加载训练集"></a>3.3.3.2 加载训练集</h4><pre class="line-numbers language-python"><code class="language-python"> train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>                                         <span class="token punctuation">)</span> train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span>                                               batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                               shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               num_workers<span class="token operator">=</span>nw                                               <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-3-加载验证集"><a href="#3-3-3-3-加载验证集" class="headerlink" title="3.3.3.3 加载验证集"></a>3.3.3.3 加载验证集</h4><pre class="line-numbers language-python"><code class="language-python">val_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span>                                       <span class="token punctuation">)</span>val_num <span class="token operator">=</span> len<span class="token punctuation">(</span>val_dataset<span class="token punctuation">)</span>val_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span>                                             batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                             shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                             num_workers<span class="token operator">=</span>nw                                             <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-4-保存数据索引"><a href="#3-3-3-4-保存数据索引" class="headerlink" title="3.3.3.4 保存数据索引"></a>3.3.3.4 保存数据索引</h4><pre class="line-numbers language-python"><code class="language-python">flower_list <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>class_to_idx    cla_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> flower_list<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>cla_dict<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"calss_indices.json"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>        json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-训练过程"><a href="#3-3-4-训练过程" class="headerlink" title="3.3.4 训练过程"></a>3.3.4 训练过程</h3><pre class="line-numbers language-python"><code class="language-python">net <span class="token operator">=</span> AlexNet<span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> init_weights<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 实例化网络(5分类)</span>    <span class="token comment" spellcheck="true"># net.to(device)</span>    net<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 直接指定 cpu</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 交叉熵损失</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.0002</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 优化器(训练参数, 学习率)</span>    epochs <span class="token operator">=</span> <span class="token number">10</span>     <span class="token comment" spellcheck="true"># 训练轮数</span>    save_path <span class="token operator">=</span> <span class="token string">"./AlexNet.pth"</span>    best_accuracy <span class="token operator">=</span> <span class="token number">0.0</span>    train_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 开启Dropout</span>        running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        train_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 设置进度条图标</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_bar<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 遍历训练集,</span>            images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data   <span class="token comment" spellcheck="true"># 获取训练集图像和标签</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 清除历史梯度</span>            outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正向传播</span>            loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计算损失值</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 方向传播</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新优化器参数</span>            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_bar<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"train epoch [{}/{}] loss:{:.3f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                                                      epochs<span class="token punctuation">,</span>                                                                      loss                                                                      <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证</span>        net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 关闭Dropout</span>        acc <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            val_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>            <span class="token keyword">for</span> val_data <span class="token keyword">in</span> val_bar<span class="token punctuation">:</span>                val_images<span class="token punctuation">,</span> val_labels <span class="token operator">=</span> val_data                outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>val_images<span class="token punctuation">)</span>                predict_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                acc <span class="token operator">+=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>predict_y<span class="token punctuation">,</span> val_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        val_accuracy <span class="token operator">=</span> acc <span class="token operator">/</span> val_num        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> <span class="token operator">%</span>              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> train_steps<span class="token punctuation">,</span> val_accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val_accuracy <span class="token operator">></span> best_accuracy<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 保存准确率最高的</span>            best_accuracy <span class="token operator">=</span> val_accuracy            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finshed Training."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练过程可视化信息输出：</p><p><img src="https://img-blog.csdnimg.cn/fb6dcf0ecd424d6bb91480e680524068.png#pic_center" alt="在这里插入图片描述"><br><strong>GPU 训练代码：</strong> 仅在 CPU 训练的基础上做了数据转换处理。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""训练(GPU)"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> json<span class="token keyword">import</span> time<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> datasets<span class="token punctuation">,</span> utils<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">from</span> model <span class="token keyword">import</span> AlexNet<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"use device is {device}"</span><span class="token punctuation">)</span>    data_transform <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"train"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                    transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"val"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                                    transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># data_root = os.path.abspath(os.path.join(os.getcwd(), "../..")) # 读取数据路径</span>    data_root <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root<span class="token punctuation">,</span> <span class="token string">"data_set"</span><span class="token punctuation">,</span> <span class="token string">"flower_data"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># image_path = data_root + "/data_set/flower_data/"</span>    <span class="token keyword">assert</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"{} path does not exist."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>                                         <span class="token punctuation">)</span>    train_num <span class="token operator">=</span> len<span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span>    flower_list <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>class_to_idx    cla_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> flower_list<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>cla_dict<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"calss_indices.json"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>        json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> <span class="token number">32</span>    nw <span class="token operator">=</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size <span class="token keyword">if</span> batch_size <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 线程数计算</span>    nw <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Using {nw} dataloader workers every process."</span><span class="token punctuation">)</span>    train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span>                                               batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                               shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               num_workers<span class="token operator">=</span>nw                                               <span class="token punctuation">)</span>    val_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                       transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span>                                       <span class="token punctuation">)</span>    val_num <span class="token operator">=</span> len<span class="token punctuation">(</span>val_dataset<span class="token punctuation">)</span>    val_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>val_dataset<span class="token punctuation">,</span>                                             batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                                             shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                             num_workers<span class="token operator">=</span>nw                                             <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Using {train_num} images for training, {val_num} images for validation."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># test_data_iter = iter(val_loader)</span>    <span class="token comment" spellcheck="true"># test_image, test_label = next(test_data_iter)</span>    <span class="token triple-quoted-string string">""" 测试数据集图片"""</span>    <span class="token comment" spellcheck="true"># def imshow(img):</span>    <span class="token comment" spellcheck="true">#     img = img / 2 + 0.5</span>    <span class="token comment" spellcheck="true">#     np_img = img.numpy()</span>    <span class="token comment" spellcheck="true">#     plt.imshow(np.transpose(np_img, (1, 2, 0)))</span>    <span class="token comment" spellcheck="true">#     plt.show()</span>    <span class="token comment" spellcheck="true"># print(' '.join('%5s' % cla_dict[test_label[j].item()] for j in range(4)))</span>    <span class="token comment" spellcheck="true"># imshow(utils.make_grid(test_image))</span>    net <span class="token operator">=</span> AlexNet<span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> init_weights<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.0002</span><span class="token punctuation">)</span>    epochs <span class="token operator">=</span> <span class="token number">10</span>    save_path <span class="token operator">=</span> <span class="token string">"./AlexNet.pth"</span>    best_accuracy <span class="token operator">=</span> <span class="token number">0.0</span>    train_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        train_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_bar<span class="token punctuation">)</span><span class="token punctuation">:</span>            images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_bar<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"train epoch [{}/{}] loss:{:.3f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                                                      epochs<span class="token punctuation">,</span>                                                                      loss                                                                      <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证</span>        net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        acc <span class="token operator">=</span> <span class="token number">0.0</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            val_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> file<span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>            <span class="token keyword">for</span> val_data <span class="token keyword">in</span> val_bar<span class="token punctuation">:</span>                val_images<span class="token punctuation">,</span> val_labels <span class="token operator">=</span> val_data                outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>val_images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>                predict_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                acc <span class="token operator">+=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>predict_y<span class="token punctuation">,</span> val_labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        val_accuracy <span class="token operator">=</span> acc <span class="token operator">/</span> val_num        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[epoch %d ] train_loss: %3f    val_accurancy: %3f"</span> <span class="token operator">%</span>              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> train_steps<span class="token punctuation">,</span> val_accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val_accuracy <span class="token operator">></span> best_accuracy<span class="token punctuation">:</span>            best_accuracy <span class="token operator">=</span> val_accuracy            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Finshed Training."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-5-结果预测"><a href="#3-3-5-结果预测" class="headerlink" title="3.3.5 结果预测"></a>3.3.5 结果预测</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""预测"""</span><span class="token triple-quoted-string string">"""预测"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> torch<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> model <span class="token keyword">import</span> AlexNet<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>    data_transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    image_path <span class="token operator">=</span> <span class="token string">"./sunflowers01.jpg"</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    img <span class="token operator">=</span> data_transform<span class="token punctuation">(</span>img<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [N, C H, W]</span>    img <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>img<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 维度扩展</span>    <span class="token comment" spellcheck="true"># print(f"img={img}")</span>    json_path <span class="token operator">=</span> <span class="token string">"./calss_indices.json"</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>json_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        class_indict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># model = AlexNet(num_classes=5).to(device)   # GPU</span>    model <span class="token operator">=</span> AlexNet<span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># CPU</span>    weights_path <span class="token operator">=</span> <span class="token string">"./AlexNet.pth"</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>weights_path<span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭 Dorpout</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># output = torch.squeeze(model(img.to(device))).cpu()   #GPU</span>        output <span class="token operator">=</span> torch<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>model<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 维度压缩</span>        predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        predict_cla <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>predict<span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        print_res <span class="token operator">=</span> <span class="token string">"class: {}  prob: {:.3}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>class_indict<span class="token punctuation">[</span>str<span class="token punctuation">(</span>predict_cla<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                    predict<span class="token punctuation">[</span>predict_cla<span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>print_res<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># for i in range(len(predict)):</span>        <span class="token comment" spellcheck="true">#     print("class: {}  prob: {:.3}".format(class_indict[str(predict_cla)],</span>        <span class="token comment" spellcheck="true">#                                             predict[predict_cla].numpy()))</span>        plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测结果如下：</p><p><img src="https://img-blog.csdnimg.cn/d5c7d1622c404b7ba5f0112dd96bf93a.png#pic_center" alt="在这里插入图片描述"></p><p>输入向日葵，预测准确率为 1.0 。</p><hr><p><strong>欢迎关注公众号：【千艺千寻】，共同成长</strong></p><p><img src="https://img-blog.csdnimg.cn/20200704120239641.jpg#pic_center" alt="在这里插入图片描述"></p><hr><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><ol><li><a href="https://blog.csdn.net/m0_37867091/article/details/107150142" target="_blank" rel="noopener">pytorch图像分类篇：3.搭建AlexNet并训练花分类数据集</a></li><li><a href="https://www.bilibili.com/video/BV1W7411T7qc/?spm_id_from=333.999.0.0&vd_source=103efe685ad4c1216c5d837f7dd7d25c" target="_blank" rel="noopener">B站UP主——3.2 使用pytorch搭建AlexNet并训练花分类数据集</a></li><li><a href="https://blog.51cto.com/u_4029519/5424126" target="_blank" rel="noopener">TensorFlow2学习十三、实现AlexNet</a></li><li><a href="https://yey.world/2020/12/15/Pytorch-11/" target="_blank" rel="noopener">PyTorch 11：模型容器与 AlexNet 构建</a></li><li><a href="https://yey.world/2020/12/14/Pytorch-10/" target="_blank" rel="noopener">PyTorch 10：模型创建步骤与 nn.Module</a></li><li><a href="https://cs231n.github.io/assets/conv-demo/index.html" target="_blank" rel="noopener">卷积——动图演示</a></li><li><a href="https://www.runoob.com/python3/python3-os-path.html" target="_blank" rel="noopener">Python3 os.path() 模块</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
